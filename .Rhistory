help("<<-")
apropos("rnor")
apropos("rno")
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
makecachematrix(x=(1:4,2,2))
makecachematrix(1:4,2,2)
makeCacheMatrix(1:4,2,2)
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
traceback()
?function()
ddd
a <- matrix(1:4,2,2)
makeCacheMatrix(z)
makeCacheMatrix(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- vector(1,3,4,5,6,7,8,9,10)
a <- function(1,3,4,5,6,7,8,9,10)
b <- function(1:10)
b <- c(1:10)
makeVector(b)
traceback()
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
ty <- matrix(1:4,2,2)
ty
makeCacheMatrix()
makeCacheMatrix(ty)
cacheSolve()
cacheSolve(ty)
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
cacheSolve(ty)
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
ty
cacheSolve(ty)
source('D:/AneeshProgramming/DataScience/ProgrammingAssignment2/cachematrix.R')
cacheSolve(ty)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
ll
ss
s
s
s
s
s
sq
q
q
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
## Sets the value of the function
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
##Solves the matrix for inverse and stores in the cache
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
invmatrix <- solve(x$get())
m <- solve(invmatrix, ...)
x$setinv(m)
return(m)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
ty
ty
